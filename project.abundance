{
    "atomType": "Molecule",
    "name": "Corrugated-Roofing-Circle-v2",
    "x": 0,
    "y": 0,
    "uniqueID": "74e97323-dbcf-4577-bf9a-c3bca8a2acee",
    "ioValues": [],
    "description": "Molecules provide an organizational structure to contain atoms. Double click on a molecule to enter it. Use the up arrow in the upper right hand corner of the screen to go up one level.",
    "topLevel": true,
    "allAtoms": [
        {
            "atomType": "Output",
            "name": "Output",
            "x": 0.98,
            "y": 0.5,
            "uniqueID": "5461caf4-cd82-4e13-925c-5e0c7b3b8fd1",
            "ioValues": [
                {
                    "name": "number or geometry",
                    "ioValue": "587ac0e6-412d-408e-8ead-0730eb4fbedf"
                }
            ],
            "description": "Connect geometry here to make it available in the next level up. "
        },
        {
            "atomType": "Code",
            "name": "Code",
            "x": 0.17065868263473055,
            "y": 0.3083333333333333,
            "uniqueID": "e48f9b50-4f43-46a8-85f0-bbd0cce9de46",
            "ioValues": [
                {
                    "name": "thickness",
                    "ioValue": 10
                },
                {
                    "name": "numBumps",
                    "ioValue": 10
                }
            ],
            "description": "Defines a Replicad code block.",
            "codeVersion": 1,
            "code": " \n      //Inputs:[thickness, numBumps]\n      //This defines the molecules inputs and creates variables with the same names which can be referenced in the code\n      \n      //Define a circle\n       const circleFunction = (t) => {\n\n         \n       const period = 72;\n       const circumference = numBumps * period;\n       const baseRadius = circumference / (2 * Math.PI);\n       console.log(\"Base Radius: \" + baseRadius);\n\n        t = t === 1 ? 0: t\n      \n        const length = Math.PI*2*baseRadius;\n        const amplitude = 19 / 2;\n        const sinX = t * length; // Scale  to the total length (circumference)\n        const sinY = amplitude * Math.sin((2 * Math.PI * sinX) / period)\n      \n        const angle = 2 * Math.PI * t;\n      \n        const radius = baseRadius + sinY;\n      \n        const circleX = radius * Math.cos(angle);\n        const circleY = radius * Math.sin(angle);\n      \n        const x = circleX ;\n        const y = circleY;\n      \n      \n        return [x, y];\n      };\n\n      // Step 3: Create the sinewave shape\n      const points = Math.max(200, 6*numBumps);\n      const sinewaveShape = replicad.drawParametricFunction(circleFunction, { pointsCount: points });\n  \n    \n      // Return the combined shape\n      let createdShape =  sinewaveShape.sketchOnPlane().extrude(thickness);\n\n      //This is the plane we are going to put our new shape on\n      const newPlane = new replicad.Plane().pivot(0, 'Y');\n      \n      //For our new geometry we need to define the tags, color, plane, etc\n      let shape2 = {\n          geometry: [createdShape], \n          tags: [\"aTag\"],\n          color: '#A3CE5B',\n          plane: newPlane,\n          bom: []\n      }\n      \n      //Then we can return our created shape in just the same way\n      return shape2\n      \n      \n          /**\n          To Use the Code Atom, enter your inputs to the input list a.e Inputs:[shape, height]\n          If your input is connected to another atom with a replicad geometry you can access its geometry by looking up its ID in your library. a.e library[Input1].geometry[0] \n          Use any replicad available methods to modify your geometry. Learn more about all of the available methods at \n          https://replicad.xyz/docs/introapp/UserGuide.html \n          Return a replicad object that includes geometry, color, tags and plane. \n      \n      \n          Example Code Atom:\n      \n            Inputs:[shape, x];\n      \n            let finalShape = library[shape].geometry[0].clone.translate[x,0,0]\n      \n            return {geometry: finalShape, color: library[shape].color, plane: library[shape].plane, tags: library[shape].tags }\n      \n            - See more examples at _______ \n      \n      \n          */\n      "
        },
        {
            "atomType": "Code",
            "name": "Code",
            "x": 0.3333333333333333,
            "y": 0.28611111111111115,
            "uniqueID": "b54466ac-9999-4cd7-a4a6-63beaa184c86",
            "ioValues": [
                {
                    "name": "height",
                    "ioValue": 40
                },
                {
                    "name": "number",
                    "ioValue": 20
                }
            ],
            "description": "Defines a Replicad code block.",
            "codeVersion": 1,
            "code": " \n      //Inputs:[number, height]\n      //This defines the molecules inputs and creates variables with the same names which can be referenced in the code\n      \n      let factor = 2;\n      const period = 72;\n      const amplitude = 19 / 2;\n      const xScale = period / (2 * Math.PI);\n      const nPeriods = number; // üîÅ Number of periods to repeat\n      \n      let shape = replicad.draw();\n      \n      for (let i = 0; i < nPeriods; i++) {\n        let offsetX = i * period;\n      \n        // First spline: 0 to œÄ (up and back down)\n        shape = shape.smoothSplineTo(\n          [offsetX + Math.PI * xScale, 0 * amplitude],\n          {\n            startTangent: 45,         // Going up at start\n            startFactor: factor,\n            endTangent: -45,          // Coming down at œÄ\n            endFactor: factor\n          }\n        )\n        // Second spline: œÄ to 2œÄ (down and back up)\n        .smoothSplineTo(\n          [offsetX + 2 * Math.PI * xScale, 0 * amplitude],\n          {\n            startTangent: -45,        // Going down at œÄ\n            startFactor: factor,\n            endTangent: 45,           // Coming up at 2œÄ\n            endFactor: factor\n          }\n        );\n      }\n      \n      // Add base lines and close shape\n      shape = shape\n        .lineTo([nPeriods * period, -height])  // Right-bottom corner\n        .lineTo([0, -height])                  // Left-bottom corner\n        .close();                          // Close path\n\n      const newPlane = new replicad.Plane().pivot(0, 'Y');\n      \n      //For our new geometry we need to define the tags, color, plane, etc\n      let shape2 = {\n          geometry: [shape], \n          tags: [\"aTag\"],\n          color: '#A3CE5B',\n          plane: newPlane,\n          bom: []\n      }\n      \n      //Then we can return our created shape in just the same way\n      return shape2\n      "
        },
        {
            "atomType": "Extrude",
            "name": "Extrude",
            "x": 0.6117764471057885,
            "y": 0.4277777777777778,
            "uniqueID": "587ac0e6-412d-408e-8ead-0730eb4fbedf",
            "ioValues": [
                {
                    "name": "geometry",
                    "ioValue": "b54466ac-9999-4cd7-a4a6-63beaa184c86"
                },
                {
                    "name": "height",
                    "ioValue": 30
                }
            ],
            "description": "Extrudes a 2D shape. Input can be negitive. "
        },
        {
            "atomType": "Code",
            "name": "Code",
            "x": 0.4411177644710579,
            "y": 0.7944444444444444,
            "uniqueID": "1545a357-27cd-4fa9-a6dc-b4a419698cb2",
            "ioValues": [
                {
                    "name": "number",
                    "ioValue": 10
                },
                {
                    "name": "height",
                    "ioValue": 40
                }
            ],
            "description": "Defines a Replicad code block.",
            "codeVersion": 1,
            "code": " \n      //Inputs:[number, height]\n      //This defines the molecules inputs and creates variables with the same names which can be referenced in the code\n      \n      let factor = 2;\n      const period = 72;\n      const amplitude = 19 / 2;\n      const xScale = period / (2 * Math.PI);\n      const nPeriods = number; \n      const circumference = nPeriods * period;\n      const radius = circumference/(2*Math.PI);\n\n      function computeX(fraction){\n        const theta = 2 * Math.PI *fraction; // angle in radians\n        const x = radius*Math.cos(theta);\n        return x;\n      }\n\n      function computeY(fraction){\n        const theta = 2 * Math.PI * fraction; // angle in radians\n        const y = radius*Math.sin(theta);\n        return y;\n      }\n\n      function tangentAngle(fraction, clockwise = false) {\n          const theta = 2 * Math.PI * fraction;\n          const phi = clockwise\n              ? theta - Math.PI / 2 // CW\n              : theta + Math.PI / 2; // CCW\n\n          let degrees = phi * (180 / Math.PI);\n        \n          return degrees; // radians\n      }\n      \n      let shape = replicad.draw();\n\n      \n      shape.movePointerTo([computeX(0), computeY(0)])\n      \n      for (let i = 0; i < nPeriods; i++) {\n        let fractionStart = i/number //The percentage of the way around the circle that this point is\n        let fractionMiddle =  (2*i+1)/(2*number);\n        let fractionEnd = (i+1)/number;\n      \n        // First spline: 0 to œÄ (up and back down)\n        shape = shape.smoothSplineTo(\n          [computeX(fractionStart), computeY(fractionStart)],\n          {\n            startTangent: tangentAngle(fractionStart) + 45,         // Going up at start\n            startFactor: factor,\n            endTangent: tangentAngle(fractionMiddle)-45,          // Coming down at œÄ\n            endFactor: factor\n          }\n        )\n        // Second spline: œÄ to 2œÄ (down and back up)\n        .smoothSplineTo(\n          [computeX(fractionMiddle), computeY(fractionMiddle)],\n          {\n            startTangent: tangentAngle(fractionMiddle)-45,        // Going down at œÄ\n            startFactor: factor,\n            endTangent: tangentAngle(fractionEnd) + 45,           // Coming up at 2œÄ\n            endFactor: factor\n          }\n        );\n      }\n      \n      // Add base lines and close shape\n      shape = shape\n        .close();                          // Close path\n\n      const newPlane = new replicad.Plane().pivot(0, 'Y');\n      \n      //For our new geometry we need to define the tags, color, plane, etc\n      let shape2 = {\n          geometry: [shape], \n          tags: [\"aTag\"],\n          color: '#A3CE5B',\n          plane: newPlane,\n          bom: []\n      }\n      \n      //Then we can return our created shape in just the same way\n      return shape2\n      "
        },
        {
            "atomType": "Code",
            "name": "Code",
            "x": 0.18662674650698602,
            "y": 0.5166666666666666,
            "uniqueID": "c6359eb3-7c21-4c5d-a041-95eb6d32e5b9",
            "ioValues": [
                {
                    "name": "number",
                    "ioValue": 10
                },
                {
                    "name": "height",
                    "ioValue": 10
                }
            ],
            "description": "Defines a Replicad code block.",
            "codeVersion": 1,
            "code": " \n      //Inputs:[number, height]\n      //This defines the molecules inputs and creates variables with the same names which can be referenced in the code\n      \n      let factor = 2;\n      const period = 72;\n      const amplitude = 19 / 2;\n      const xScale = period / (2 * Math.PI);\n      const nPeriods = number; \n      const circumference = nPeriods * period;\n      const radius = circumference/(2*Math.PI);\n\n      function computeX(fraction){\n        const theta = 2 * Math.PI *fraction; // angle in radians\n        const x = radius*Math.cos(theta);\n        return x;\n      }\n\n      function computeY(fraction){\n        const theta = 2 * Math.PI * fraction; // angle in radians\n        const y = radius*Math.sin(theta);\n        return y;\n      }\n\n      function tangentAngle(fraction, clockwise = false) {\n          const theta = 2 * Math.PI * fraction;\n          const phi = clockwise\n              ? theta - Math.PI / 2 // CW\n              : theta + Math.PI / 2; // CCW\n\n          let degrees = phi * (180 / Math.PI);\n        \n          return degrees; // radians\n      }\n      \n      let shape = replicad.draw();\n\n      \n      shape.movePointerTo([computeX(0), computeY(0)])\n      \n      for (let i = 0; i < nPeriods; i++) {\n        let fractionStart = i/number //The percentage of the way around the circle that this point is\n        let fractionMiddle =  (2*i+1)/(2*number);\n        let fractionEnd = (i+1)/number;\n      \n        // First spline: 0 to œÄ (up and back down)\n        shape = shape.smoothSplineTo(\n          [computeX(fractionStart), computeY(fractionStart)],\n          {\n            startTangent: tangentAngle(fractionStart) + 45,         // Going up at start\n            startFactor: factor,\n            endTangent: tangentAngle(fractionMiddle)-45,          // Coming down at œÄ\n            endFactor: factor\n          }\n        )\n        // Second spline: œÄ to 2œÄ (down and back up)\n        .smoothSplineTo(\n          [computeX(fractionMiddle), computeY(fractionMiddle)],\n          {\n            startTangent: tangentAngle(fractionMiddle)-45,        // Going down at œÄ\n            startFactor: factor,\n            endTangent: tangentAngle(fractionEnd) + 45,           // Coming up at 2œÄ\n            endFactor: factor\n          }\n        );\n      }\n      \n      // Add base lines and close shape\n      shape = shape\n        .close();                          // Close path\n\n      const newPlane = new replicad.Plane().pivot(0, 'Y');\n      \n      //For our new geometry we need to define the tags, color, plane, etc\n      let shape2 = {\n          geometry: [shape], \n          tags: [\"aTag\"],\n          color: '#A3CE5B',\n          plane: newPlane,\n          bom: []\n      }\n      \n      //Then we can return our created shape in just the same way\n      return shape2\n      "
        }
    ],
    "allConnectors": [
        {
            "ap1Name": "geometry",
            "ap2Name": "geometry",
            "ap2Primary": true,
            "ap1ID": "b54466ac-9999-4cd7-a4a6-63beaa184c86",
            "ap2ID": "587ac0e6-412d-408e-8ead-0730eb4fbedf"
        },
        {
            "ap1Name": "geometry",
            "ap2Name": "number or geometry",
            "ap2Primary": false,
            "ap1ID": "587ac0e6-412d-408e-8ead-0730eb4fbedf",
            "ap2ID": "5461caf4-cd82-4e13-925c-5e0c7b3b8fd1"
        }
    ],
    "unitsKey": "Unitless",
    "fileTypeVersion": 1,
    "compiledBom": [],
    "filetypeVersion": 1
}